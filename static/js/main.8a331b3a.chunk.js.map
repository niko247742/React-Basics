{"version":3,"sources":["components/Home.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Home","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","age","initialAge","homeLink","initialLinkName","userName","initialUserName","inherits","createClass","key","value","setState","changeLink","event","target","changeName","_this2","react_default","a","createElement","className","onClick","onMakeOlder","bind","onMakeYounger","greet","type","onChange","onHandleChange","onChangeLink","onHandleNameChange","onChangeName","Component","Header","href","App","alert","newName","newUserName","Header_Header","Home_Home","onGreet","hobbies","onChangeLinkName","onChangeUserName","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8a331b3a.chunk.js","sourcesContent":["import React from 'react';\nimport { Component } from 'react';\n\nexport class Home extends Component {\n    constructor(props) {\n        super();\n        this.state = {\n            age: props.initialAge,\n            homeLink: props.initialLinkName,\n            userName: props.initialUserName\n        }\n    }\n\n    onMakeOlder() {\n        this.setState( {\n            age: this.state.age + 1\n        });\n    }\n    onMakeYounger() {\n        if(this.state.age <= 0 ) {\n            return false\n        } else {\n            this.setState( {\n                age: this.state.age - 1\n            });\n        }    \n    }\n\n    onChangeLink() {\n        this.props.changeLink(this.state.homeLink);\n    }\n    onHandleChange(event) {\n        this.setState({\n            homeLink: event.target.value\n        });\n    }\n    onChangeName() {\n        this.props.changeName(this.state.userName);\n    }\n    onHandleNameChange(event) {\n        this.setState({\n            userName: event.target.value\n        });\n    }\n\n    render() {\n        return(\n            <div className = \"well well-lg\">\n                <p>Hello my name is {this.props.userName} and I am {this.state.age} years old.</p>\n                {/* <div>\n                    <h4>Hobbies</h4>\n                    <ul className = \"list-group\">\n                        {this.props.hobbies.map((hobby, i) => <li className = \"list-group-item\" key = {i}>{hobby}</li>)}\n                    </ul>\n                </div> */}\n                <button onClick={this.onMakeOlder.bind(this)} className= \"btn btn-primary btn-block\">Make Me Older!</button>\n                <button onClick={this.onMakeYounger.bind(this)} className= \"btn btn-info btn-block\">Make Me Younger!</button>\n                <button onClick = {this.props.greet} className=\"btn btn-primary btn-block\">Greet</button>\n                <br></br>\n                <div>\n                    <input type=\"text\" \n                        value={this.state.homeLink} \n                        onChange = {(event) => this.onHandleChange(event)}/>\n                    <button className = \"btn btn-info\" onClick = {this.onChangeLink.bind(this)}>Change Header Link</button>    \n                </div>\n                <br></br>\n                <div>\n                    <input type=\"text\" \n                        value={this.state.userName} \n                        onChange = {(event) => this.onHandleNameChange(event)}/>\n                    <button className = \"btn btn-info\" onClick = {this.onChangeName.bind(this)}>Change Your Name</button>    \n                </div>\n            </div>\n        )\n    }\n}\n\n\n","import React from 'react';\n//import { Component } from 'react';\n\nexport const Header = (props) => {\n        return (\n            <nav className = \"navbar navbar-default\">\n                <div className = \"navbar-header\">\n                    <ul className = \"nav navbar-nav\">\n                        <li><a href=\"#\">{props.homeLink}</a></li>\n                    </ul>\n                </div>\n            </nav>\n        );\n}\n","import React from 'react';\nimport { Component } from 'react';\nimport { Home } from \"./components/Home\"\nimport { Header } from \"./components/Header\"\n//import './App.css';\n\nclass App extends Component {\nconstructor() {\n  super();\n  this.state = {\n    homeLink: 'Home',\n    userName: \"Max\"\n  };\n}\n\n  onGreet() {\n    alert(\"Hello\");\n  }\n  onChangeLinkName(newName) {\n    this.setState({\n        homeLink: newName\n      }); \n  }\n  onChangeUserName(newUserName) {\n    this.setState({\n        userName: newUserName\n      }); \n  }\n  render () {\n    return (\n      <div className=\"App\">\n        <div className = \"container\">\n          <div className = \"row\">\n            <div className = \"col-xs-10 col-xs-offset-1\">\n            <Header homeLink = {this.state.homeLink}/>\n            </div>\n          </div>\n          <div className = \"row\">\n            <div className = \"col-xs-10 col-xs-offset-1\">\n                <Home \n                  greet = {this.onGreet} \n                  userName= {this.state.userName} \n                  initialAge = {20} \n                  hobbies = {[\"Hiking\", \"Swimming\", \"Reading\"]}\n                  changeLink = {this.onChangeLinkName.bind(this)}\n                  initialLinkName = {this.state.homeLink} \n                  initialUserName = {this.state.userName}\n                  changeName = {this.onChangeUserName.bind(this)}\n\n                  />\n            </div>\n        </div>\n      </div>\n\n      </div>\n        \n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}